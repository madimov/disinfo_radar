title,url,date,summary,cleaning,category
"
        Learn How Global Configuration Management and IBM CLM Work Together
    ",https://spectrum.ieee.org/global-configuration-management,2022-11-07 19:00:17.046720,,"In this presentation we will build the case for component-based requirements management This is a sponsored article brought to you by 321 Gang . To fully support Requirements Management ( RM ) best practices , a tool needs to support traceability , versioning , reuse , and Product Line Engineering ( PLE ) . This is especially true when designing large complex systems or systems that follow standards and regulations . Most modern requirement tools do a decent job of capturing requirements and related metadata . Some tools also support rudimentary mechanisms for baselining and traceability capabilities ( “ linking ” requirements ) . The earlier versions of IBM DOORS Next supported a rich configurable traceability and even a rudimentary form of reuse . DOORS Next became a complete solution for managing requirements a few years ago when IBM invented and implemented Global Configuration Management ( GCM ) as part of its Engineering Lifecycle Management ( ELM , formerly known as Collaborative Lifecycle Management or simply CLM ) suite of integrated tools . On the surface , it seems that GCM just provides versioning capability , but it is so much more than that . GCM arms product/system development organizations with support for advanced requirement reuse , traceability that supports versioning , release management and variant management . It is also possible to manage collections of related Application Lifecycle Management ( ALM ) and Systems Engineering artifacts in a single configuration . Global Configuration Management - The Game Changer for Requirements Management In this presentation we will build the case for component-based requirements management , illustrate Global Configuration Management concepts , and focus on various Component Usage Patterns within the context of GCM 7.0.2 and IBM ’ s Engineering Lifecycle ( ELM ) suite of tools . Watch on-demand webinar now → Before GCM , Project Areas were the only containers available for organizing data . Project Areas could support only one stream of development . Enabling application local Configuration Management ( CM ) and GCM allows for the use of Components . Components are contained within Project Areas and provide more granular containers for organizing artifacts and new configuration management constructs ; streams , baselines , and change sets at the local and global levels . Components can be used to organize requirements either functionally , logically , physically , or using some combination of the three . A stream identifies the latest version of a modifiable configuration of every artifact housed in a component . The stream automatically updates the configuration as new versions of artifacts are created in the context of the stream . The multiple stream capability in components equips teams the tools needed to seamlessly manage multiple releases or variants within a single component . GCM arms product/system development organizations with support for advanced requirement reuse , traceability that supports versioning , release management , and variant management . Prior to GCM support , the associations between Project Areas would enable traceability between single version of ALM artifacts . With GCM , virtual networks of components can be constructed allowing for traceability between artifacts across components – between requirements components and between artifacts across other ALM domains ( software , change management , testing , modeling , product parts , etc. ) . 321 Gang has defined common usage patterns for working with components and their streams . These patterns include Variant Development , Parallel Release Management , Simple Single Stream Development , and others . The GCM capability for virtual networks and the use of some of these patterns provide a foundation to support PLE . The 321 Gang has put together a short webinar also titled Global Configuration Management : A Game Changer for Requirements Management , that expands on the topics discussed here . During the webinar we build a case for component-based requirements management , illustrate Global Configuration Management concepts , and introduce common GCM usage patterns using ELM suite of tools . Watch this on-demand webinar now . It ’ s hard to learn , but your code will produce fewer nasty surprises You ’ d expect the longest and most costly phase in the life cycle of a software product to be the initial development of the system , when all those great features are first imagined and then created . In fact , the hardest part comes later , during the maintenance phase . That ’ s when programmers pay the price for the shortcuts they took during development . So why did they take shortcuts ? Maybe they didn ’ t realize that they were cutting any corners . Only when their code was deployed and exercised by a lot of users did its hidden flaws come to light . And maybe the developers were rushed . Time-to-market pressures would almost guarantee that their software will contain more bugs than it would otherwise .",0.0
"
        Learn How Global Configuration Management and IBM CLM Work Together
    ",https://spectrum.ieee.org/global-configuration-management,2022-11-07 18:00:17.480717,,"In this presentation we will build the case for component-based requirements management This is a sponsored article brought to you by 321 Gang . To fully support Requirements Management ( RM ) best practices , a tool needs to support traceability , versioning , reuse , and Product Line Engineering ( PLE ) . This is especially true when designing large complex systems or systems that follow standards and regulations . Most modern requirement tools do a decent job of capturing requirements and related metadata . Some tools also support rudimentary mechanisms for baselining and traceability capabilities ( “ linking ” requirements ) . The earlier versions of IBM DOORS Next supported a rich configurable traceability and even a rudimentary form of reuse . DOORS Next became a complete solution for managing requirements a few years ago when IBM invented and implemented Global Configuration Management ( GCM ) as part of its Engineering Lifecycle Management ( ELM , formerly known as Collaborative Lifecycle Management or simply CLM ) suite of integrated tools . On the surface , it seems that GCM just provides versioning capability , but it is so much more than that . GCM arms product/system development organizations with support for advanced requirement reuse , traceability that supports versioning , release management and variant management . It is also possible to manage collections of related Application Lifecycle Management ( ALM ) and Systems Engineering artifacts in a single configuration . Global Configuration Management - The Game Changer for Requirements Management In this presentation we will build the case for component-based requirements management , illustrate Global Configuration Management concepts , and focus on various Component Usage Patterns within the context of GCM 7.0.2 and IBM ’ s Engineering Lifecycle ( ELM ) suite of tools . Watch on-demand webinar now → Before GCM , Project Areas were the only containers available for organizing data . Project Areas could support only one stream of development . Enabling application local Configuration Management ( CM ) and GCM allows for the use of Components . Components are contained within Project Areas and provide more granular containers for organizing artifacts and new configuration management constructs ; streams , baselines , and change sets at the local and global levels . Components can be used to organize requirements either functionally , logically , physically , or using some combination of the three . A stream identifies the latest version of a modifiable configuration of every artifact housed in a component . The stream automatically updates the configuration as new versions of artifacts are created in the context of the stream . The multiple stream capability in components equips teams the tools needed to seamlessly manage multiple releases or variants within a single component . GCM arms product/system development organizations with support for advanced requirement reuse , traceability that supports versioning , release management , and variant management . Prior to GCM support , the associations between Project Areas would enable traceability between single version of ALM artifacts . With GCM , virtual networks of components can be constructed allowing for traceability between artifacts across components – between requirements components and between artifacts across other ALM domains ( software , change management , testing , modeling , product parts , etc. ) . 321 Gang has defined common usage patterns for working with components and their streams . These patterns include Variant Development , Parallel Release Management , Simple Single Stream Development , and others . The GCM capability for virtual networks and the use of some of these patterns provide a foundation to support PLE . The 321 Gang has put together a short webinar also titled Global Configuration Management : A Game Changer for Requirements Management , that expands on the topics discussed here . During the webinar we build a case for component-based requirements management , illustrate Global Configuration Management concepts , and introduce common GCM usage patterns using ELM suite of tools . Watch this on-demand webinar now . It ’ s hard to learn , but your code will produce fewer nasty surprises You ’ d expect the longest and most costly phase in the life cycle of a software product to be the initial development of the system , when all those great features are first imagined and then created . In fact , the hardest part comes later , during the maintenance phase . That ’ s when programmers pay the price for the shortcuts they took during development . So why did they take shortcuts ? Maybe they didn ’ t realize that they were cutting any corners . Only when their code was deployed and exercised by a lot of users did its hidden flaws come to light . And maybe the developers were rushed . Time-to-market pressures would almost guarantee that their software will contain more bugs than it would otherwise .",0.0
